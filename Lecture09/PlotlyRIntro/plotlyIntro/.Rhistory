print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(col = cyl, size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8) +
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(col = geom_curve, size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8)
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8)
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8) +
scale_color_manual(values=c('Red','Green'))
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8) +
scale_color_manual(values=c('Red','Green', 'Blue'))
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8) +
scale_color_manual(values = c("#999999", "#E69F00", "#56B4E9"))
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8) +
scale_color_grey()
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8) +
scale_color_light()
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 1) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 1) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 1)
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 1.5) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 1.5) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 1.5)
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 1.5) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 1.5) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 1.5) +
geom_point(aes(x = 1, y = 0, yend = 1, xend = 0),
color = 'red')
library(ggplot2)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 1.5) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 1.5) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 1.5) +
geom_point(aes(x = 1, y = 0, yend = 1, xend = 0),
color = 'red')
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 1.5) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 1.5) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 1.5) +
geom_point(aes(x = 1, y = 0),
color = 'red')
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 1.5) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 1.5) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 1.5) +
geom_point(aes(x = 1, y = 0),
color = 'green')
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 1.5) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 1.5) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 1.5) +
geom_point(aes(x = 1, y = 0),
color = 'green') +
theme_classic()
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3, shape = 16) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 1.5) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 1.5) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 1.5) +
geom_point(aes(x = 0.8, y = 0),
color = 'green') +
theme_classic()
print(pi_plot)
library(tidyverse)
data <- read.table('telemastdata.csv', header = T,
sep = ',',
stringsAsFactors = T)
data <- as.tibble(data)
data <- as_tibble(data)
library(tidyverse)
data <- read.table('telemastdata.csv', header = T,
sep = ',',
stringsAsFactors = T)
data <- as_tibble(data)
dim(data)
head(data)
view(data)
df_suspects <- data %>%
select(name, phone_type, time0) %>%
filter(phone_type == 'iPhone' & between(data$time0, 407, 425))
df_suspects
library(tidyverse)
view(data)
df_suspects <- data %>%
select(name, phone_type, time0) %>%
filter(phone_type == 'iPhone' & between(data$time0, 407, 425))
df_suspects
library(tidyverse)
data <- read.table('telemastdata.csv', header = T,
sep = ',',
stringsAsFactors = T)
data <- as_tibble(data)
df_suspects <- data %>%
select(name, phone_type, time0) %>%
filter(phone_type == 'iPhone' & between(data$time0, 407, 425))
df_suspects
example_matrix <- matrix(c(4,7,2,6,4,1,6,6,7), ncol = 3, byrow = TRUE)
#Att namnge kolonner behövs inte, men finns här som förtydligande för väntat
#format på input till circle_intersection.
colnames(example_matrix) <- c("X-coord_mast", "Y-coord_mast", "Avstånd till källa")
rownames(example_matrix) <- c("Mast 1", "Mast 2", "Mast 3")
print(example_matrix)
# Hämtar triangulation filen förutsatt den finns i samma working directory.
# på detta sättet kan vi hämta funktionen circle_intersection utan att kopiera
# koden till denna filen
source("triangulation.r", encoding = "latin1")
koordinater <- circle_intersection(example_matrix)
koordinater
koordinater <- circle_intersection(example_matrix)
co_mat <- matrix(c(4,7,2,6,4,1,6,6,7), ncol = 3, byrow = TRUE)
#Att namnge kolonner behövs inte, men finns här som förtydligande för väntat
#format på input till circle_intersection.
colnames(co_mat) <- c("X-coord_mast", "Y-coord_mast", "Avstånd till källa")
rownames(co_mat) <- c("Mast 1", "Mast 2", "Mast 3")
print(co_mat)
# Hämtar triangulation filen förutsatt den finns i samma working directory.
# på detta sättet kan vi hämta funktionen circle_intersection utan att kopiera
# koden till denna filen
source("triangulation.r", encoding = "latin1")
koordinater <- circle_intersection(co_mat)
#Hastighet att använda vid skalning av tid för att få ut distans till mastar.
#Telefonsignaler breder ut sig radiellt med uuuungefär ljusets hastighet.
velocity <- 3*10^8
#De fasta koordinaterna för masterna. Alltså var masterna befinner sig i ett
# x-, y-plan. Foga samman denna information med ditt beräknade avstånd till
#källan med tid omgjord till distans
master <- matrix(c(4,7,6,4,6,6), ncol = 2, byrow = TRUE)
master
distans <- velocity * between(data$time0, 407, 425)
distans
df_suspects
jn_mast1 <- data$timem1 - data$time0
jn_mast2 <- data$timem2 - data$time0
jn_mast3 <-
jn_mast1
jn_mast3 <-
jn_mast1
jn_mast3 <-
print(jn_mast1)
#filtrera på
df_suspects <- data %>%
select(name, phone_type, time0, timem1, timem2, timem3) %>%
filter(phone_type == 'iPhone' & between(data$time0, 407, 425))
#skriv ut 6 st misstänka
df_suspects
df_suspects
coor <- select(name, phone_type, (timem1 - time0), (timem2 - time0), (timem3 - time0)) %>%
+   filter(phone_type == 'iPhone' & between(data$time0, 407, 425))
coor <- df_suspects %>%
select(name, phone_type, (timem1 - time0), (timem2 - time0), (timem3 - time0)) %>%
+   filter(phone_type == 'iPhone' & between(data$time0, 407, 425))
df_suspects
coor <- df_suspects %>%
select(name, phone_type, (df_suspects$timem1 - df_suspects$time0)) %>%
+   filter(phone_type == 'iPhone' & between(data$time0, 407, 425))
df_suspects <- as.numeric(df_suspects$timem1)
typeof(df_suspect)
typeof(df_suspects)
df_suspects
#skapa en
data <- read.table('telemastdata.csv', header = T,
sep = ',',
stringsAsFactors = T)
data <- as_tibble(data)
#filtrera på
df_suspects <- data %>%
select(name, phone_type, time0, timem1, timem2, timem3) %>%
filter(phone_type == 'iPhone' & between(data$time0, 407, 425))
#skriv ut 6 st misstänka
df_suspects
df_suspects$timem1 <- as.numeric(df_suspects$time1)
df_suspects$timem1 <- as.numeric(df_suspects$timem1)
df_suspects
df_suspects
data <- as_tibble(data)
data(head)
head(data)
data$timem1 <- as.numeric(data$timem1)
data$timem2 <- as.numeric(data$timem2)
data$timem3 <- as.numeric(data$timem3)
head(data)
summary(data)
data$timem1 <- as.numeric(as.character(data$timem1))
head(data)
sapply(data, class)
sapply(data, class)
library(tidyverse)
library(ggplot2)
library(psych)
nr_of_iterations <- 100
set.seed(123)
x <- runif(nr_of_iterations, min = 0, max = 1)
y <- runif(nr_of_iterations, min = 0, max = 1)
points_within_circle <- df %>%
subset(sqrt(x^2 + y^2) <= 1)
points_outside_circle <- df %>%
subset(sqrt(x^2 + y^2) > 1)
nrow(points_within_circle)
nrow(points_outside_circle)
library(tidyverse)
library(ggplot2)
library(psych)
library(RColorBrewer)
nr_of_iterations <- 100
set.seed(123)
x <- runif(nr_of_iterations, min = 0, max = 1)
y <- runif(nr_of_iterations, min = 0, max = 1)
df <- data.frame(x, y)
points_within_circle <- df %>%
subset(sqrt(x^2 + y^2) <= 1)
points_outside_circle <- df %>%
subset(sqrt(x^2 + y^2) > 1)
#Med hjälp av formel 'pi - 4*(points_within_circle/nr_of_iterations' kan vi se
# hur nära pi vi kommer.
# Ökar vi antalet iterations så kommer vi närmre pi. Ex: Mean för olika iterations:
# 10 iteration = x 2.92 och y 2.96
# 100 iteration = x 3.13 och y 3.12
# 1000 iteration = x 3.14 och y 3.14
approx_pi <- pi - 4*(points_within_circle/nr_of_iterations)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(col = 'black', size = 3) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8)
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(col = 'black', size = 3) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8) +
scale_colour_brewer(type = "seq", palette = "Spectral")
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8) +
scale_colour_brewer(type = "seq", palette = "Spectral")
print(pi_plot)
#Skapar en scatterplot för att visualisera datapunkter inkl linjer för 0.4, 0.8
# och 1.0.
pi_plot <- ggplot(data = df, aes(x = x, y = y)) +
geom_point(size = 3) +
labs(x = 'X-value', y = 'Y-value', title = 'Scatterplot med linjer') +
geom_curve(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'blue', size = 0.8) +
geom_curve(aes(x = 0.8, y = 0, yend = 0.8, xend = 0), color = 'red', size = 0.8) +
geom_curve(aes(x = 0.4, y = 0, yend = 0.4, xend = 0), color = 'yellow', size = 0.8) +
geom_point(aes(x = 1, y = 0, yend = 1, xend = 0), color = 'green')
print(pi_plot)
library(tidyverse)
install.packages('lubridate')
install.packages("lubridate")
install.packages('plotly')
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyverse)
library(plotly)
library(tidyverse)
library(lubridate)
setwd("C:/Users/jonas/Documents/GitHub/visuell_data_analys/Lecture09/PlotlyRIntro/plotlyIntro")
data_daywise <- read_csv("daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
#Sortera på Date istället för land
data_daywise <- arrange(data_daywise, Date)
head(data_daywise)
#Gör en line plot av confirmed cases över tid.
fig <- plot_ly(x = as.Date(data_daywise$Date), y = data_daywise$Confirmed,
type = 'scatter',
mode = 'lines',
color = 'red')
fig
fig <- fig %>%  layout(title = 'Confirmed covid cases by date',
yaxis = list(title = 'Number of confirmed cases'),
xaxis = list(title = 'Date'))
fig
#Lägg med pipe operator till 3 lines med add_trace till fig - confirmed, recovered och deaths. Ser någonting konstigt ut?
#Kan du spekulera om någon förklaring?
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y = ~Confirmed, name = 'Confirmed')
fig <- fig %>% add_trace(y = ~Recovered, name = 'Recovered')
fig <- fig %>% add_trace(y = ~Deaths, name = 'Deaths')
fig
fig
#Lägg med pipe operator till 3 lines med add_trace till fig - confirmed, recovered och deaths. Ser någonting konstigt ut?
#Kan du spekulera om någon förklaring?
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y = ~Confirmed, name = 'Confirmed')
fig <- fig %>% add_trace(y = ~Recovered, name = 'Recovered')
fig <- fig %>% add_trace(y = ~Deaths, name = 'Deaths')
fig
library(tidyverse)
library(plotly)
library(tidyverse)
library(lubridate)
data_daywise <- read_csv("daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
#Sortera på Date istället för land
data_daywise <- arrange(data_daywise, Date)
head(data_daywise)
#Gör en line plot av confirmed cases över tid.
fig <- plot_ly(x = as.Date(data_daywise$Date), y = data_daywise$Confirmed,
type = 'scatter',
mode = 'lines',
color = 'red')
fig
fig <- fig %>%  layout(title = 'Confirmed covid cases by date',
yaxis = list(title = 'Number of confirmed cases'),
xaxis = list(title = 'Date'))
fig
#Lägg med pipe operator till 3 lines med add_trace till fig - confirmed, recovered och deaths. Ser någonting konstigt ut?
#Kan du spekulera om någon förklaring?
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y = ~Confirmed, name = 'Confirmed')
fig <- fig %>% add_trace(y = ~Recovered, name = 'Recovered')
fig <- fig %>% add_trace(y = ~Deaths, name = 'Deaths')
fig
fig <- fig %>% add_trace(y = ~Confirmed, name = 'Confirmed',
mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y = ~Recovered, name = 'Recovered',
mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y = ~Deaths, name = 'Deaths',
mode = 'lines', type = 'scatter')
fig
#Add_trace tar också in line som argument - en lista där vi kan inkludera färg och storlek.
#Justera linjernas form och färg genom att göra 3 listor och lägg till i figuren.
conf_list <- list(color ='green', width = 4)
rec_list <- list(color = 'blue', width = 6)
deaths_list <- list(color = 'red', width = 2)
#Add_trace tar också in line som argument - en lista där vi kan inkludera färg och storlek.
#Justera linjernas form och färg genom att göra 3 listor och lägg till i figuren.
conf.list <- list(color ='green', width = 4)
rec.list <- list(color = 'blue', width = 6)
deaths.list <- list(color = 'red', width = 2)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed',
mode = 'lines', type = 'scatter',
line = conf.list)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered',
mode = 'lines', type = 'scatter',
line = rec.list)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths',
mode = 'lines', type = 'scatter',
line = deaths.list)
fig
#Add_trace tar också in line som argument - en lista där vi kan inkludera färg och storlek.
#Justera linjernas form och färg genom att göra 3 listor och lägg till i figuren.
conf.list <- list(color ='green', width = 5)
rec.list <- list(color = 'blue', width = 4)
deaths.list <- list(color = 'red', width = 10)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed',
mode = 'lines', type = 'scatter',
line = conf.list)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered',
mode = 'lines', type = 'scatter',
line = rec.list)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths',
mode = 'lines', type = 'scatter',
line = deaths.list)
fig
#Add_trace tar också in line som argument - en lista där vi kan inkludera färg och storlek.
#Justera linjernas form och färg genom att göra 3 listor och lägg till i figuren.
conf.list <- list(color ='green', width = 3)
rec.list <- list(color = 'blue', width = 5)
deaths.list <- list(color = 'red', width = 3)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed',
mode = 'lines', type = 'scatter',
line = conf.list)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered',
mode = 'lines', type = 'scatter',
line = rec.list)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths',
mode = 'lines', type = 'scatter',
line = deaths.list)
fig
#Add_trace tar också in line som argument - en lista där vi kan inkludera färg och storlek.
#Justera linjernas form och färg genom att göra 3 listor och lägg till i figuren.
conf.list <- list(color ='green', width = 2)
rec.list <- list(color = 'blue', width = 2)
deaths.list <- list(color = 'red', width = 2)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed',
mode = 'lines', type = 'scatter',
line = conf.list)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered',
mode = 'lines', type = 'scatter',
line = rec.list)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths',
mode = 'lines', type = 'scatter',
line = deaths.list)
fig
