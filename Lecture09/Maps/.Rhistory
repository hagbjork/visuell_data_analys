make_moons$y <- as.character(make_moons$y)
View(make_moons)
make_moons$Y <- as.character(make_moons$y)
make_moons$Y <- as.character(make_moons$Y)
set.seed(123)
make_moons_split <- initial_split(make_moons, prop = 3/4)
make_moons_training <- make_moons_split %>%
training()
make_moons_test <- make_moons_split %>%
testing()
train_index <- as.integer(rownames(make_moons_training))
test_index <- as.integer(rownames(make_moons_test))
make_moons[train_index,'split'] = 'Train Split Label'
make_moons[test_index,'split'] = 'Test Split Label'
make_moons$Y <- paste(make_moons$split,make_moons$Y)
fig <- plot_ly(data = make_moons, x = ~X1, y = ~X2, type = 'scatter', mode = 'markers',alpha = 0.5, symbol = ~y, symbols = c('square','circle','square-dot','circle-dot'),
marker = list(size = 12,
color = 'lightyellow',
line = list(color = 'black',width = 1)))
fig
make_moons <- read.csv(file = "make_moons.csv")
make_moons$label <- as.character(make_moons$label)
set.seed(123)
make_moons_split <- initial_split(make_moons, prop = 3/4)
make_moons_training <- make_moons_split %>%
training()
make_moons_test <- make_moons_split %>%
testing()
train_index <- as.integer(rownames(make_moons_training))
test_index <- as.integer(rownames(make_moons_test))
make_moons[train_index,'split'] = 'Train Split Label'
make_moons[test_index,'split'] = 'Test Split Label'
fig <- plot_ly(data = make_moons, x = ~X, y = ~Y, type = 'scatter', mode = 'markers',alpha = 0.5, symbol = ~label, symbols = c('square','circle','square-dot','circle-dot'),
marker = list(size = 12,
color = 'lightyellow',
line = list(color = 'black',width = 1)))
fig
setwd("~/GitHub/visuell_data_analys/Lecture09/PlotlyRIntro/Maps")
df <- read.csv("gdp2014.csv")
head(df)
df$idx <- 1:222
df$hover <- with(df, paste(COUNTRY, '<br>', 'Code', CODE, '<br>', 'Index', idx))
fig <- plot_geo(df)
fig <- fig %>% add_trace(
z = ~GDP..BILLIONS., text = ~hover, locations = ~CODE,
color = ~GDP..BILLIONS., colors = 'Purples'
)
fig <- fig %>% colorbar(title = "Millions USD")
fig <- fig %>% layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)'
)
fig
#Exempel - geografisk data
#Ladda in json data
data <- fromJSON("test.json")
library(jsonlite)
#Exempel - geografisk data
#Ladda in json data
data <- fromJSON("test.json")
data$features[[1]]
#install.packages('rjson')
library(rjson)
#Exempel - geografisk data
#Ladda in json data
data <- fromJSON("test.json")
#Ladda in CSV - ska matcha FIPS
df = read.csv("unemployed.csv", header = T, colClasses = c(fips="character"))
head(df)
#Gör en fig att plotta
fig <- plot_ly()
#Kan byggas på med add_trace
fig <- fig %>% add_trace(
type="choropleth",
geojson=data,
locations=df$fips,
z=df$unemp
)
#Exempel - geografisk data
#Ladda in json data
data <- fromJSON("test.json")
#Exempel - geografisk data
#Ladda in json data
data <- fromJSON(file = "test.json")
data$features[[1]]
#Ladda in CSV - ska matcha FIPS
df = read.csv("unemployed.csv", header = T, colClasses = c(fips="character"))
head(df)
#Gör en fig att plotta
fig <- plot_ly()
#Kan byggas på med add_trace
fig <- fig %>% add_trace(
type="choropleth",
geojson=data,
locations=df$fips,
z=df$unemp
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = list(
scope = 'usa'
)
)
fig
useBytes = TRUE
#Gör en fig att plotta
fig <- plot_ly()
#Kan byggas på med add_trace
fig <- fig %>% add_trace(
type="choropleth",
geojson=data,
locations=df$fips,
z=df$unemp
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = list(
scope = 'usa'
)
)
#Exempel - geografisk data
#Ladda in json data
data <- fromJSON(file = "test.json")
data$features[[1]]
#Ladda in CSV - ska matcha FIPS
df = read.csv("unemployed.csv", header = T, colClasses = c(fips="character"))
head(df)
#Gör en fig att plotta
fig <- plot_ly()
#Kan byggas på med add_trace
fig <- fig %>% add_trace(
type="choropleth",
geojson=data,
locations=df$fips,
z=df$unemp
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% colorbar(title = "Unemp") #loyment Rate (%)
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = list(
scope = 'usa'
)
)
fig
library(rjson)
data <- fromJSON(file = 'test.json')
data$features[[1]]
df <- read.csv('unemploymed.csv', header=T, colClasses = c(flips='character'))
df <- read.csv('unemployed.csv', header=T, colClasses = c(flips='character'))
df <- read.csv('unemployed.csv', header=T, colClasses = c(fips='character'))
head(df)
fig <- fig %>% add_trace(df,
type = 'choropleth',
geojson=data,
locations = dffips
)
fig <- fig %>% add_trace(df,
type = 'choropleth',
geojson=data,
locations = df$fips
)
fig
encoding = "UTF-8"
fig <- fig %>% add_trace(df,
type = 'choropleth',
geojson=data,
locations = df$fips
)
fig
library(plotly)
library(rjson)
data <- fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
data$features[[1]]
df = read.csv("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv", header = T, colClasses = c("fips"="character"))
head(df)
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character"))
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
f
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=counties,
locations=df$fips,
z=df$unemp,
colorscale="Viridis",
zmin=0,
zmax=12,
marker=list(line=list(
width=0)
)
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = g
)
fig
data <- fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
data$features[[1]]
counties <- rjson::fromJSON(file=url)
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character"))
head(df)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=data,
locations=df$fips,
z=df$unemp,
colorscale="Viridis",
zmin=0,
zmax=12,
marker=list(line=list(
width=0)
)
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = g
)
fig
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=data,
locations=df$fips,
z=df$unemp,
colorscale="Viridis",
zmin=0,
zmax=12,
marker=list(line=list(
width=0)
)
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig
fig <- fig %>% layout(
geo = g
)
fig
library(plotly)
df <- read.csv("gdp2014.csv")
head(df)
df$idx <- 1:222
df <- read.csv("gdp2014.csv")
df$idx <- 1:222
df$hover <- with(df, paste(COUNTRY, '<br>', 'Code', CODE, '<br>', 'Index', idx))
fig <- plot_geo(df)
fig <- fig %>% add_trace(
z = ~GDP..BILLIONS., text = ~hover, locations = ~CODE,
color = ~GDP..BILLIONS., colors = 'Purples'
)
fig <- fig %>% colorbar(title = "Millions USD")
fig <- fig %>% layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)'
)
fig
library(pracma)
library(plotly)
library(tidyverse)
library(tidymodels)
library(plyr)
library(kknn)
data(iris) # We will use the iris data, which is included in R by default
mesh_size = .02
margin = 1
db_split <- initial_split(iris, prop = 3/4)
train_data <- training(db_split)
test_data <- testing(db_split)
# Create a mesh grid on which we will run our model
l_min = min(iris$Sepal.Length) - margin
l_max = max(iris$Sepal.Length) + margin
w_min = min(iris$Sepal.Width) - margin
w_max = max(iris$Sepal.Width) + margin
lrange = seq(l_min, l_max, mesh_size)
wrange = seq(w_min, w_max, mesh_size)
mg = meshgrid(lrange, wrange)
ll = mg$X
ww = mg$Y
# Create classifier, run predictions on grid
model = nearest_neighbor( neighbors = 15, weight_func = 'inv' ) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
fit(Species ~ Sepal.Length + Sepal.Width, data = train_data)
ll1 <- matrix(ll, length(ll), 1)
ww1 <- matrix(ww, length(ww), 1)
final <- data.frame(ll1, ww1)
colnames(final) = c("Sepal.Length", "Sepal.Width" )
pred <- model %>%
predict(final, type = 'prob')
dim_val <- dim(ll)
proba_setosa <- matrix(pred$.pred_setosa, dim_val[1], dim_val[2])
proba_versicolor <- matrix(pred$.pred_versicolor, dim_val[1], dim_val[2])
proba_virginica <- matrix(pred$.pred_virginica, dim_val[1], dim_val[2])
# Compute the classifier confidence
Z <- array(c(proba_setosa, proba_versicolor, proba_virginica), dim = c(dim_val[1],dim_val[2],3))
diff = aaply(Z, c(1,2), max) -  (aaply(Z, c(1,2), sum) - aaply(Z,c(1,2), max))
# Overlay the heatmap of the confidence on the scatter plot of the examples
fig <- plot_ly()
fig <- fig %>% add_trace(data=test_data, x = ~Sepal.Length, y = ~Sepal.Width, symbol = ~Species, split = ~Species, symbols = c('square-dot','circle-dot','diamond'),
type = 'scatter', mode = 'markers',
marker = list(size = 12, line = list(width = 1.5), color = 'lightyellow'))%>% layout(title="Prediction Confidence on Test Split")
fig <- fig %>% add_trace(x = lrange, y = wrange, z = diff, type = 'heatmap')
fig
df <- read.csv("gdp2014.csv")
head(df)
df <- read.csv("gdp2014.csv")
df <- read.csv("gdp2014.csv")
head(df)
df$idx <- 1:222
fig <- plot_geo(df)
fig <- fig %>% add_trace(
z = ~GDP..BILLIONS., locations = ~CODE,
color = ~GDP..BILLIONS., colors = 'Purples'
)
fig
df$hover <- with(df, paste(COUNTRY, '<br>', 'Code', CODE, '<br>', 'Index', idx))
fig <- plot_geo(df)
fig <- fig %>% add_trace(
z = ~GDP..BILLIONS., locations = ~CODE, text = ~hover,
color = ~GDP..BILLIONS., colors = 'Purples'
)
fig
df$hover <- with(df, paste(COUNTRY, 'Code', CODE, '<br>', 'Index', idx))
fig <- plot_geo(df)
fig <- fig %>% add_trace(
z = ~GDP..BILLIONS., locations = ~CODE, text = ~hover,
color = ~GDP..BILLIONS., colors = 'Purples'
)
fig <- fig %>% colorbar(title = "Millions USD")
fig <- fig %>% layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)'
)
fig
df$hover <- with(df, paste(COUNTRY, 'Code', CODE, 'Index', idx))
fig <- plot_geo(df)
fig <- fig %>% add_trace(
z = ~GDP..BILLIONS., locations = ~CODE, text = ~hover,
color = ~GDP..BILLIONS., colors = 'Purples'
)
fig <- fig %>% colorbar(title = "Millions USD")
fig <- fig %>% layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)'
)
View(df)
library(pracma)
library(plotly)
library(tidyverse)
library(tidymodels)
library(plyr)
library(kknn)
data(iris) # We will use the iris data, which is included in R by default
mesh_size = .02
margin = 1
db_split <- initial_split(iris, prop = 3/4)
train_data <- training(db_split)
test_data <- testing(db_split)
# Create a mesh grid on which we will run our model
l_min = min(iris$Sepal.Length) - margin
l_max = max(iris$Sepal.Length) + margin
w_min = min(iris$Sepal.Width) - margin
w_max = max(iris$Sepal.Width) + margin
lrange = seq(l_min, l_max, mesh_size)
wrange = seq(w_min, w_max, mesh_size)
mg = meshgrid(lrange, wrange)
ll = mg$X
ww = mg$Y
# Create classifier, run predictions on grid
model = nearest_neighbor( neighbors = 15, weight_func = 'inv' ) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
fit(Species ~ Sepal.Length + Sepal.Width, data = train_data)
ll1 <- matrix(ll, length(ll), 1)
ww1 <- matrix(ww, length(ww), 1)
final <- data.frame(ll1, ww1)
colnames(final) = c("Sepal.Length", "Sepal.Width" )
pred <- model %>%
predict(final, type = 'prob')
dim_val <- dim(ll)
proba_setosa <- matrix(pred$.pred_setosa, dim_val[1], dim_val[2])
proba_versicolor <- matrix(pred$.pred_versicolor, dim_val[1], dim_val[2])
proba_virginica <- matrix(pred$.pred_virginica, dim_val[1], dim_val[2])
# Compute the classifier confidence
Z <- array(c(proba_setosa, proba_versicolor, proba_virginica), dim = c(dim_val[1],dim_val[2],3))
diff = aaply(Z, c(1,2), max) -  (aaply(Z, c(1,2), sum) - aaply(Z,c(1,2), max))
# Overlay the heatmap of the confidence on the scatter plot of the examples
fig <- plot_ly()
fig <- fig %>% add_trace(data=test_data, x = ~Sepal.Length, y = ~Sepal.Width, symbol = ~Species, split = ~Species, symbols = c('square-dot','circle-dot','diamond'),
type = 'scatter', mode = 'markers',
marker = list(size = 12, line = list(width = 1.5), color = 'lightyellow'))%>% layout(title="Prediction Confidence on Test Split")
fig <- fig %>% add_trace(x = lrange, y = wrange, z = diff, type = 'heatmap')
fig
#install.packages('rjson')
library(rjson)
library(jsonlite)
#Exempel - geografisk data
#Ladda in json data
data <- fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
data$features[[1]]
#Ladda in CSV - ska matcha FIPS
df = read.csv("unemployed.csv", header = T, colClasses = c(fips="character"))
head(df)
#Gör en fig att plotta
fig <- plot_ly()
#Kan byggas på med add_trace
fig <- fig %>% add_trace(
type="choropleth",
geojson=data,
locations=df$fips,
z=df$unemp
)
fig <- fig %>% colorbar(title = "Unemp") #loyment Rate (%)
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = list(
scope = 'usa'
)
)
fig
#Kan byggas på med add_trace
fig <- fig %>% add_trace(
type="choropleth",
geojson=data,
locations=df$fips,
z=df$unemp,
colorscale="Viridis"
)
fig <- fig %>% colorbar(title = "Unemp") #loyment Rate (%)
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = list(
scope = 'usa'
)
)
fig
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character"))
head(df)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=data,
locations=df$fips,
z=df$unemp,
colorscale="Viridis",
zmin=0,
zmax=12,
marker=list(line=list(
width=0)
)
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = g
)
fig
