#Matar ut den nya standardavvikelsen i procent jÃ¤mfÃ¶rt med vad den var innan borttagningen av rad 89 med tvÃ¥ decimaler
paste("Standardavvikelsen fÃ¶r Age Ã¤r nu",round((sd(df_lungcap$Age)/Age_sd_before)*100,2),"procent av vad den var innan borttagningen av raden/raderna")
paste("Standardavvikelsen fÃ¶r Height Ã¤r nu",round((sd(df_lungcap$Height)/Height_sd_before)*100,2),"procent av vad den var innan borttagningen av raden/raderna")
round((sd(df_lungcap$Height)/Height_sd_before)*100,2)
#standardavvikelsen har minskat till ca: 1,08 respektive 1,95 PROCENT av ursprungs standardavvikelsen
par(mfrow=c(7,7))#Kikar pÃ¥ hela dataframen igen
plot(df_lungcap)
###SVAR###
paste0("new_var",
which.max(
c(summary(lm(LungCap ~ Age+Height+new_var1, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var2, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var3, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var4, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var5, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var6, data = df_lungcap))$r.squared)),
" ger hÃ¶gst R-squared i kombination med Age och Height.")
pnorm(-1.625)
pnorm(1.875)
pnorm(0)
1-pnorm(7.79)
setwd("~/GitHub/visuell_data_analys/Plotly/PlotlyRIntro")
setwd("~/GitHub/visuell_data_analys/Plotly/PlotlyRIntro/plotlyIntro")
library(plotly)
install.packages("plotly")
library(plotly)
#Exempel för plotly med enkel line plot -
data <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
head(data)
#Exempel på "bare bones" - det som krävs för att få en enkel visual
fig <- plot_ly(x = as.Date(data$AAPL_x), y = data$AAPL_y, type = 'scatter', mode = 'lines', color = I('red')
, name = 'Share Prices (in USD)')
fig
fig <- fig %>%  layout(title = 'Apple Share Prices over time (2014)',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'AAPL_x',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'AAPL_y',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
showlegend = TRUE, width = 1100)
fig
install.packages('lubridate')
library(tidyverse)
library(plotly)
library(tidyverse)
library(lubridate)
data_daywise <- read_csv("daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
#Sortera på Date istället för land
data_daywise <- arrange(data_daywise, Date)
head(data_daywise)
#Facit:
plot_ly(data_daywise, x = ~Date, y = ~Confirmed, type = 'scatter',mode = 'lines')
fig <- plot_ly(data_daywise, x=~ Date)
#Facit: (Källan slutade bara att rapportera recovered cases är förklaringen)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter')
fig
#Facit:
cnfrm.line <- list(color = 'blue', width = 4)
death.line <- list(color = 'red', width = 6)
recovered.line <- list(color = 'green', width =2)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter', line = cnfrm.line)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Lägg till ett layoutargument med pipe operator som ger en titel och xaxis/yaxis titlar
#Facit:
fig <- fig %>% layout(title = 'Total Cases World Wide', xaxis = list(title = 'Date'), yaxis = list(title = 'Total Cases'))
fig
#Ändra mode i confirmed till lines + markers och ge
cnfrm.marker <- list(color='orange', size = 1, opacity = 1, line = list(color = 'orange', width = 2))
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Facit: Det går givetvis inte med statistisk signifikans säga att MS Zaandam
#eller Vanuatu har högst dödsratio i världen.
data_countrywise <- read_csv("country_daywise.csv")
head(data_countrywise)
latest <- data_countrywise %>% filter(Date == max(Date)) %>% arrange(desc(Deaths/Confirmed))
latest$death_rate <- round(latest$Deaths/latest$Confirmed, digits = 3)
head(latest)
#Facit:
latest <- arrange(latest, desc(Confirmed))
latest <- latest[1:10, ]
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar') %>% layout(title = 'Confirmed Cases by Country',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'Count',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'Country',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
width = 1100)
new_fig
new_fig
#Facit - saknar dock legend!
latest$Country <- factor(latest$Country, levels = c(as.character(latest$Country)))
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p
data <- read_csv("country_daywise.csv") %>% filter(Country == 'India') %>% arrange(Date)
fig1 <- plot_ly(data, x =~Date, y =~Confirmed, type = 'scatter', mode = 'lines', name = 'Confirmed Cases')
fig2 <- plot_ly(data, x =~Date, y =~Recovered, type = 'scatter', mode = 'lines', name = 'Recovered Cases')
fig3 <- plot_ly(data, x =~Date, y =~Deaths, type = 'scatter', mode = 'lines', name = 'Deaths Cases')
subplot(fig1, fig2, fig3, shareX = FALSE, nrows = 2)
head(data)
plot_ly(data = latest, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', color =~Country, colors = heat.colors(n=10), size =~Confirmed, marker = list(size =~1e-4*Deaths))
#Facit:
data <- read_csv("country_daywise.csv") %>% filter(Date == max(Date))
plot_ly(data = data, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', name =~Country, showlegend = F)
#Facit:
fig1 <- plot_ly(latest, labels =~Country, values =~Confirmed, type = 'pie', textinfo = 'label+percent')
fig1
fig2 <- plot_ly(latest, labels =~Country, values =~Deaths, type = 'pie', textinfo = 'label+percent')
fig2
#Slutligen - gör en pie chart med values =~death_rate. Finns det någonting missvisande med valet av visual när
#du utreder detta med en pie chart? Tips - försök att förklara vad storleken för varje land betyder.
fig3 <- plot_ly(latest, labels =~Country, values =~death_rate, type = 'pie', textinfo = 'label')
fig3
setwd("~/GitHub/visuell_data_analys/Lecture09/PlotlyRIntro/plotlyIntro")
library(plotly)
#Exempel för plotly med enkel line plot -
data <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
head(data)
#Exempel på "bare bones" - det som krävs för att få en enkel visual
fig <- plot_ly(x = as.Date(data$AAPL_x), y = data$AAPL_y, type = 'scatter', mode = 'lines', color = I('red')
, name = 'Share Prices (in USD)')
fig
fig <- fig %>%  layout(title = 'Apple Share Prices over time (2014)',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'AAPL_x',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'AAPL_y',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
showlegend = TRUE, width = 1100)
fig
#Exempel på "bare bones" - det som krävs för att få en enkel visual
fig <- plot_ly(x = as.Date(data$AAPL_x), y = data$AAPL_y, type = 'scatter', mode = 'lines', color = I('red')
, name = 'Share Prices (in USD)')
fig
library(tidyverse)
library(plotly)
library(tidyverse)
library(lubridate)
data_daywise <- read_csv("daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
#Sortera på Date istället för land
data_daywise <- arrange(data_daywise, Date)
head(data_daywise)
library(tidyverse)
library(plotly)
library(tidyverse)
library(lubridate)
data_daywise <- read_csv("daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
#Sortera på Date istället för land
data_daywise <- arrange(data_daywise, Date)
head(data_daywise)
#Facit:
plot_ly(data_daywise, x = ~Date, y = ~Confirmed, type = 'scatter',mode = 'lines')
fig <- plot_ly(data_daywise, x=~ Date)
fig
fig <- plot_ly(data_daywise, x=~ Date)
#Facit: (Källan slutade bara att rapportera recovered cases är förklaringen)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter')
fig
#Facit:
cnfrm.line <- list(color = 'blue', width = 4)
death.line <- list(color = 'red', width = 6)
recovered.line <- list(color = 'green', width =2)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter', line = cnfrm.line)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
setwd("~/GitHub/visuell_data_analys/Lecture09/PlotlyRIntro/plotlyIntro")
data <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
head(data)
View(data_daywise)
# Simpel plotly
fig <- plot_ly(x=as.Date(data$AAPL_x), y=data$AAPL_y,
type = 'scatter', mode = 'lines', color = I('red'))
fig
I('red')
# Simpel plotly
fig <- plot_ly(x=as.Date(data$AAPL_x), y=data$AAPL_y,
type = 'scatter', mode = 'lines', color = 'red')
fig
# Simpel plotly
fig <- plot_ly(x=as.Date(data$AAPL_x), y=data$AAPL_y,
type = 'scatter', mode = 'lines', color = I('red'))
fig
fig <- fig %>% layout(
title = 'Apolle Share Prices over time 2014'
)
fig
fig <- fig %>% layout(
title = 'Aplle Share Prices over time 2014'
)
fig <- fig %>% layout(
title = 'Apple Share Prices over time 2014'
)
fig
fig <- fig %>% layout(
title = 'Apple Share Prices over time 2014'
plot_bgcolor= 'e5ecf6',
xaxis = list(
title = 'AAPL_x'
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'AAPL_y'
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
showlegend = TRUE,
width = 1100
)
fig <- fig %>% layout(
title = 'Apple Share Prices over time 2014'
plot_bgcolor= 'e5ecf6',
xaxis = list(
title = 'AAPL_x',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'AAPL_y',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
showlegend = TRUE,
width = 1100)
fig <- fig %>% layout(
title = 'Apple Share Prices over time 2014',
plot_bgcolor= 'e5ecf6',
xaxis = list(
title = 'AAPL_x',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'AAPL_y',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
showlegend = TRUE,
width = 1100)
fig <- fig %>% layout(
title = 'Apple Share Prices over time 2014',
plot_bgcolor= 'e5ecf6',
xaxis = list(
title = 'AAPL_x',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'AAPL_y',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
showlegend = TRUE)
fig
library(tidyverse)
library(plotly)
library(tidyverse)
library(lubridate)
data_daywise <- read_csv("daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
View(data_daywise)
#Sortera på Date istället för land
data_daywise <- arrange(data_daywise, Date)
library(tidyverse)
library(plotly)
library(tidyverse)
library(lubridate)
data_daywise <- read_csv("daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
#Sortera på Date istället för land
data_daywise <- arrange(data_daywise, Date)
head(data_daywise)
#Facit:
plot_ly(data_daywise, x = ~Date, y = ~Confirmed, type = 'scatter',mode = 'lines')
#Facit:
plot_ly(data_daywise, x = Date, y = ~Confirmed, type = 'scatter',mode = 'lines')
#Facit:
plot_ly(data_daywise, x = Date, y = Confirmed, type = 'scatter',mode = 'lines')
#Facit:
plot_ly(data_daywise, x = ~Date, y = ~Confirmed, type = 'scatter',mode = 'lines')
fig <- plot_ly(data_daywise, x=~ Date)
#Facit: (Källan slutade bara att rapportera recovered cases är förklaringen)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter')
fig
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter', line = cnfrm.line)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Lägg till ett layoutargument med pipe operator som ger en titel och xaxis/yaxis titlar
#Facit:
fig <- fig %>% layout(title = 'Total Cases World Wide', xaxis = list(title = 'Date'), yaxis = list(title = 'Total Cases'))
fig
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Facit: Det går givetvis inte med statistisk signifikans säga att MS Zaandam
#eller Vanuatu har högst dödsratio i världen.
data_countrywise <- read_csv("country_daywise.csv")
head(data_countrywise)
latest <- data_countrywise %>% filter(Date == max(Date)) %>% arrange(desc(Deaths/Confirmed))
latest$death_rate <- round(latest$Deaths/latest$Confirmed, digits = 3)
head(latest)
#Facit:
latest <- arrange(latest, desc(Confirmed))
latest <- latest[1:10, ]
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar') %>% layout(title = 'Confirmed Cases by Country',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'Count',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'Country',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
width = 1100)
new_fig
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar') %>% layout(title = 'Confirmed Cases by Country',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'Count',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'Country',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
width = 1100)
new_fig
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed,
type = 'bar') %>%
layout(title = 'Confirmed Cases by Country',
plot_bgcolor='#e5ecf6',
xaxis = list(title = 'Count'),
yaxis = list(title = 'Country'))
new_fig
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed,
type = 'bar') %>%
layout(title = 'Confirmed Cases by Country',
plot_bgcolor='red',
xaxis = list(title = 'Count'),
yaxis = list(title = 'Country'))
new_fig
#e5ecf6
new_fig
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed,
type = 'bar') %>%
layout(title = 'Confirmed Cases by Country',
plot_bgcolor='#e5ecf6',
xaxis = list(title = 'Count'),
yaxis = list(title = 'Country'))
new_fig
#Facit - saknar dock legend!
latest$Country <- factor(latest$Country,
levels = c(as.character(latest$Country)))
p <- plot_ly(latest, x =~Country, y =~Confirmed,
text =~death_rate,
type = 'bar',
name = 'Confirmed Cases',
marker = list(color =~death_rate))
p
View(latest)
View(latest)
data <- read_csv("country_daywise.csv") %>%
filter(Country == 'India') %>% arrange(Date)
fig1 <- plot_ly(data, x =~Date, y =~Confirmed,
type = 'scatter',
mode = 'lines',
name = 'Confirmed Cases')
fig2 <- plot_ly(data, x =~Date, y =~Recovered,
type = 'scatter',
mode = 'lines',
name = 'Recovered Cases')
fig3 <- plot_ly(data, x =~Date, y =~Deaths,
type = 'scatter',
mode = 'lines',
name = 'Deaths Cases')
subplot(fig1, fig2, fig3, shareX = FALSE, nrows = 2)
plot_ly(data = latest, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
color =~Country,
colors = heat.colors(n=10),
size =~Confirmed,
marker = list(size =~1e-4*Deaths))
plot_ly(data = latest, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
color =~Country,
colors = heat.colors(n=10),
size =~death_rate,
marker = list(size =~1e-4*Deaths))
plot_ly(data = latest, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
color =~Country,
colors = heat.colors(n=10),
size =~Confirmed,
marker = list(size =~1e-4*death_rate))
plot_ly(data = latest, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
color =~Country,
colors = heat.colors(n=10),
size =~Confirmed,
marker = list(size =~death_rate))
plot_ly(data = latest, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
color =~Country,
colors = heat.colors(n=10),
size =~Confirmed,
marker = list(size =~1e4*death_rate))
plot_ly(data = latest, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
color =~Country,
colors = heat.colors(n=10),
size =~Confirmed,
marker = list(size =~1e3*death_rate))
plot_ly(data = latest, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
color =~Country,
colors = heat.colors(n=10),
size =~Confirmed,
marker = list(size =~1e2*death_rate))
plot_ly(data = latest, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
color =~Country,
colors = heat.colors(n=10),
size =~Confirmed,
marker = list(size =~1e4*death_rate))
plot_ly(data = latest, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
color =~Country,
colors = heat.colors(n=10),
size =~Confirmed,
marker = list(size =~1e3*death_rate))
#Facit:
data <- read_csv("country_daywise.csv") %>%
filter(Date == max(Date))
plot_ly(data = data, x =~Confirmed, y=~Deaths,
type = 'scatter',
mode = 'markers',
name =~Country,
showlegend = F)
#Facit:
fig1 <- plot_ly(latest, labels =~Country, values =~Confirmed, type = 'pie', textinfo = 'label+percent')
fig1
fig2 <- plot_ly(latest, labels =~Country,
values =~Deaths,
type = 'pie',
textinfo = 'label+percent')
fig2
#Slutligen - gör en pie chart med values =~death_rate.
#Finns det någonting missvisande med valet av visual när
#du utreder detta med en pie chart?
#Tips - försök att förklara vad storleken för varje land betyder.
fig3 <- plot_ly(latest, labels =~Country,
values =~death_rate,
type = 'pie',
textinfo = 'label')
fig3
