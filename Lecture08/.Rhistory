#2.1
library(shape)
set.seed(0.123456)
xcoord <- runif(10000)
ycoord <- runif(10000)
z=sqrt(xcoord^2+ycoord^2)
plot(xcoord,ycoord,col='dark blue',pch=4,cex=.5)
pi.upskattning10 <- pi-4*(sum(z[1:10]<=1)/10)
pi.upskattning100 <- pi-4*(sum(z[1:100]<=1)/100)
pi.upskattning1000 <- pi-4*(sum(z[1:1000]<=1)/1000)
pi.upskattning10000 <- pi-4*(sum(z[1:10000]<=1)/10000)
print(c("pi minus uppskattat vÃ¤rde pÃ¥ fÃ¶r 10000 iterationer pi:",pi.upskattning10))
print(c("pi minus uppskattat vÃ¤rde pÃ¥ fÃ¶r 10000 iterationer pi:",pi.upskattning100))
print(c("pi minus uppskattat vÃ¤rde pÃ¥ fÃ¶r 10000 iterationer pi:",pi.upskattning1000))
print(c("pi minus uppskattat vÃ¤rde pÃ¥ fÃ¶r 10000 iterationer pi:",pi.upskattning10000))
#2.1###SVAR###
print("Uppskattningen av pi blir bÃ¤ttre ju fler iterationer man gÃ¶r.")
#2.2
#radien fÃ¶r cirkelbÃ¥garna:
r <- c(.4,.8,1)
plotcircle(r=r[1], mid=c(0,0), lwd=3,lcol="yellow")
plotcircle(r=r[2], mid=c(0,0), lwd=3,lcol="red")
plotcircle(r=r[3], mid=c(0,0), lwd=3,lcol="blue")
print("End")
#del 3 Hitta mÃ¶rdaren
library(tidyverse)
df <- read.csv('telemastdata.csv')
#Telefon typ=iPhone, time0=416+-9 dvs. 407-427
Misstankta_df<- filter(df, phone_type =='iPhone' & time0 >= 407 & time0<= 425)
View(Misstankta_df)
library(tidyverse)
df_lungcap <- read.csv("lungcap.csv")
#tib_lcap <- as_tibble(df_lungcap) <-FÃ¶r snabb koll
#tib_lcap
par(mfrow=c(7,7))
plot(df_lungcap)#Age & Height har en eller flera uppenbara outliers
View(df_lungcap)#Kikar pÃ¥ Dataframe direkt fÃ¶r att se om outliers Ã¤r helt uppenbara genom att sortera efter storlek
#Rad 89 tas bort, motivering: troligen felaktigt vÃ¤rde, Age/Height=10000,Ãvriga vÃ¤rden faller mellan 3-19 fÃ¶r Age och mellan 45,3-81,8 fÃ¶r Height
paste("Standardavvikelsen fÃ¶r Age:",Age_sd_before <- sd(df_lungcap$Age))#Standard avvikelse innan borttagning
paste("Standardavvikelsen fÃ¶r Height:",Height_sd_before <- sd(df_lungcap$Height))#Standard avvikelse innan borttagning
df_LungCap.bak <- df_lungcap#sparar Dataframe innan vÃ¤rdet tas bort dÃ¥ det Ã¤r en liten dataframe
df_lungcap <- df_lungcap[-89,]#tar bort rad 89 ur dataframen
#Matar ut den nya standardavvikelsen i procent jÃ¤mfÃ¶rt med vad den var innan borttagningen av rad 89 med tvÃ¥ decimaler
paste("Standardavvikelsen fÃ¶r Age Ã¤r nu",round((sd(df_lungcap$Age)/Age_sd_before)*100,2),"procent av vad den var innan borttagningen av raden/raderna")
paste("Standardavvikelsen fÃ¶r Height Ã¤r nu",round((sd(df_lungcap$Height)/Height_sd_before)*100,2),"procent av vad den var innan borttagningen av raden/raderna")
round((sd(df_lungcap$Height)/Height_sd_before)*100,2)
#standardavvikelsen har minskat till ca: 1,08 respektive 1,95 PROCENT av ursprungs standardavvikelsen
par(mfrow=c(7,7))#Kikar pÃ¥ hela dataframen igen
plot(df_lungcap)
###SVAR###
paste0("new_var",
which.max(
c(summary(lm(LungCap ~ Age+Height+new_var1, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var2, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var3, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var4, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var5, data = df_lungcap))$r.squared,
summary(lm(LungCap ~ Age+Height+new_var6, data = df_lungcap))$r.squared)),
" ger hÃ¶gst R-squared i kombination med Age och Height.")
pnorm(-1.625)
pnorm(1.875)
pnorm(0)
1-pnorm(7.79)
sc
#generate two circles
library(ggplot2)
library(dplyr)
library(tidyverse)
library(e1071)
#Generera data, sätt upp intervall med mera
nr_of_samples <- 2740
xmin = 2
xmax = 6
ymin = 4
ymax = 8
x_vals <- runif(nr_of_samples, min = xmin, max = xmax)
y_vals <- runif(nr_of_samples, min = ymin, max = ymax)
data <- cbind(x_vals, y_vals)
data <- as_tibble(as.data.frame(data))
print(data)
data_outside <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 > 1.8^2)
data_within <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 < 1.6^2)
#Assigna labels och merga
data_outside$label <- 1
data_within$label <- 0
all_data <- rbind(data_outside, data_within)
#Gör om till factors för att få schyssta labels
all_data$label <- factor(all_data$label)
sc <- ggplot(all_data, aes(x_vals, y_vals)) + geom_point(aes(color = label))
sc
#Generera data, sätt upp intervall med mera
nr_of_samples <- 2740
xmin = 2
xmax = 6
ymin = 4
ymax = 8
x_vals <- runif(nr_of_samples, min = xmin, max = xmax)
y_vals <- runif(nr_of_samples, min = ymin, max = ymax)
data <- cbind(x_vals, y_vals)
data <- as_tibble(as.data.frame(data))
print(data)
data_outside <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 > 1.8^2)
data_within <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 < 1.6^2)
#Assigna labels och merga
data_outside$label <- 1
data_within$label <- 0
all_data <- rbind(data_outside, data_within)
#Gör om till factors för att få schyssta labels
all_data$label <- factor(all_data$label)
sc <- ggplot(all_data, aes(x_vals, y_vals)) + geom_point(aes(color = label))
sc
#Vi gör en spännande support vector machine fit på det!
#Vi kan kalla på svm-paketet
svmfit = svm(label ~ x_vals + y_vals, data = all_data,
kernel = "radial", cost = 1000, scale = FALSE)
plot(svmfit, all_data)
print(svmfit)
#Centrerar - visar också vad som händer om vi inte gör det
all_data <- all_data %>% mutate(radius = sqrt((x_vals-mean(x_vals))^2
+ (y_vals-mean(y_vals))^2),
angle = atan2((y_vals - mean(all_data$y_vals)),
(x_vals- mean(all_data$x_vals))))
all_data <- all_data %>% mutate(x = radius * cos(angle), y = r * sin(angle))
print(all_data)
sc <- ggplot(all_data, aes(radius, angle)) + geom_point(aes(color = label))
sc
all_data <- all_data %>% mutate(x = radius * cos(angle), y = r * sin(angle))
all_data <- all_data %>% mutate(x = radius * cos(angle), y = radius * sin(angle))
print(all_data)
sc <- ggplot(all_data, aes(x, y)) + geom_point(aes(color = label))
sc
#generate two circles
library(ggplot2)
library(dplyr)
library(tidyverse)
library(e1071)
#Generera data, sätt upp intervall med mera
nr_of_samples <- 2740
source('~/GitHub/visuell_data_analys/Lecture08/SVMcircle.r', encoding = 'ISO-8859-1', echo=TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(mclust)
library(factoextra)
setwd("~/GitHub/visuell_data_analys/Lecture08")
data <- as_tibble(read.csv('faithful.csv'))
print(data)
ggplot(data, aes(eruptions, waiting)) + geom_point()
dens <- denstyMclust(data)
dens <- densityMclust(data)
data <- data[ , 2:3]
ggplot(data, aes(eruptions, waiting)) + geom_point()
dens <- densityMclust(data)
plot(dens)
mc <- Mclust(data)
plot(mc)
summary(mc)
str(summary(mc))
mc <- Mclust(data, G=2)
plot(mc)
mc <- Mclust(data)
plot(mc)
fviz_mclust_bic(mc)
summary(mc)$mean
summary(mc)$variance
mc$variance
mc
mc$G
summary(mc)$variance
Mclust
Mclust
mc <- Mclust(data)
plot(mc)
summary(mc)$variance
mc$parameters
#######################################################
# SVM
library(ggplot2)
#######################################################
# SVM
library(ggplot2)
library(dplyr)
library(tidyverse)
library(e1071)
nr_of_samples <- 2740
xmin <- 2
xmax <- 6
ymin <- 4
ymax <- 8
x_vals <- runif(nr_of_samples, min=xmin, max=xmax)
y_vals <- runif(nr_of_samples, min=ymin, max=ymax)
data <- cbind(x_vals, y_vals)
data <- as_tibble(data)
data
plot(data)
data_outside <- data %>% filter(x_vals^2 + y_vals^2 > 1.8^2)
data_within <- data %>% filter(x_vals^2 + y_vals^2 > 1.6^2)
data_within$label <- 0
data_outside$label <- 1
all_data <- rbind(data_outside, data_within)
all_data
all_data$label <- factor(all_data$label)
all_data
sc <- ggplot(all_data, aes(x_vals, y_vals)) + geom_point(aes(color=label))
sc
nr_of_samples <- 2740
xmin <- 2
xmax <- 6
ymin <- 4
ymax <- 8
x_vals <- runif(nr_of_samples, min=xmin, max=xmax)
y_vals <- runif(nr_of_samples, min=ymin, max=ymax)
data <- cbind(x_vals, y_vals)
data <- as_tibble(data)
data
data_outside <- data %>% filter(x_vals^2 + y_vals^2 > 1.8^2)
data_within <- data %>% filter(x_vals^2 + y_vals^2 < 1.6^2)
data_outside$label <- 1
data_within$label <- 0
all_data <- rbind(data_outside, data_within)
all_data$label <- factor(all_data$label)
all_data
sc <- ggplot(all_data, aes(x_vals, y_vals)) + geom_point(aes(color=label))
sc
data_outside <- data %>% filter((x_vals-mean(x_vals))^2 + (y_vals-mean(y_vals))^2 > 1.8^2)
data_within <- data %>% filter((x_vals-mean(x_vals))^2 + (y_vals-mean(y_vals)) < 1.6^2)
data_outside$label <- 1
data_within$label <- 0
all_data <- rbind(data_outside, data_within)
all_data$label <- factor(all_data$label)
all_data
sc <- ggplot(all_data, aes(x_vals, y_vals)) + geom_point(aes(color=label))
sc
data_outside <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 > 1.8^2)
data_within <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 < 1.6^2)
data_outside$label <- 1
data_within$label <- 0
all_data <- rbind(data_outside, data_within)
all_data$label <- factor(all_data$label)
all_data
sc <- ggplot(all_data, aes(x_vals, y_vals)) + geom_point(aes(color=label))
sc
svmfit <- svm(label~ x_vals + y_vals, kernel='linear', cost=1000, scale = FALSE)
svmfit <- svm(label~ x_vals + y_vals, data=all_data, kernel='linear', cost=1000, scale = FALSE)
plot(svmfit, all_data)
svmfit <- svm(label~ x_vals + y_vals, data=all_data,
kernel='radial', cost=1000, scale = FALSE)
plot(svmfit, all_data)
print(svmfit)
str(svmfit)
svfit$SV
svmfit$SV
all_data <- all_data %>% mutate(radius=sqrt(x_vals^2+y_vals^2),
angle=artan2(y_vals, x_vals))
all_data <- all_data %>% mutate(radius=sqrt(x_vals^2+y_vals^2),
angle=atan2(y_vals, x_vals))
print(all_data)
sc <- ggplot(all_data, aes(radius, angle)) +
geom_point(aes(color=label))
sc
all_data <- all_data %>% mutate(radius = sqrt((x_vals-mean(x_vals))^2
+ (y_vals-mean(y_vals))^2),
angle = atan2((y_vals - mean(all_data$y_vals)),
(x_vals- mean(all_data$x_vals))))                                angle=atan2(y_vals, x_vals))
source('~/.active-rstudio-document', echo=TRUE)
data <- as_tibble(read.csv('faithful.csv'))
print(data)
data <- data[ , 2:3]
ggplot(data, aes(eruptions, waiting)) + geom_point()
dens <- densityMclust(data)
plot(dens)
nr_of_samples <- 2740
xmin <- 2
xmax <- 6
ymin <- 4
ymax <- 8
x_vals <- runif(nr_of_samples, min=xmin, max=xmax)
y_vals <- runif(nr_of_samples, min=ymin, max=ymax)
data <- cbind(x_vals, y_vals)
data <- as_tibble(data)
data
data_outside <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 > 1.8^2)
data_within <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 < 1.6^2)
data_outside$label <- 1
data_within$label <- 0
all_data <- rbind(data_outside, data_within)
all_data$label <- factor(all_data$label)
all_data
sc <- ggplot(all_data, aes(x_vals, y_vals)) + geom_point(aes(color=label))
sc
svmfit <- svm(label~ x_vals + y_vals, data=all_data,
kernel='radial', cost=1000, scale = FALSE)
plot(svmfit, all_data)
print(svmfit)
str(svmfit)
svmfit$SV
all_data <- all_data %>% mutate(radius = sqrt((x_vals-mean(x_vals))^2
+ (y_vals-mean(y_vals))^2),
angle = atan2((y_vals - mean(all_data$y_vals)),
(x_vals- mean(all_data$x_vals))))                                angle=atan2(y_vals, x_vals))
print(all_data)
sc <- ggplot(all_data, aes(radius, angle)) +
geom_point(aes(color=label))
sc
all_data <- all_data %>% mutate(radius = sqrt((x_vals-mean(x_vals))^2
+ (y_vals-mean(y_vals))^2),
angle = atan2((y_vals - mean(all_data$y_vals)),
(x_vals- mean(all_data$x_vals))))                                angle=atan2(y_vals, x_vals))
#generate two circles
library(ggplot2)
library(dplyr)
library(tidyverse)
library(e1071)
#Generera data, sätt upp intervall med mera
nr_of_samples <- 2740
xmin = 2
xmax = 6
ymin = 4
ymax = 8
x_vals <- runif(nr_of_samples, min = xmin, max = xmax)
y_vals <- runif(nr_of_samples, min = ymin, max = ymax)
data <- cbind(x_vals, y_vals)
data <- as_tibble(as.data.frame(data))
print(data)
data_outside <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 > 1.8^2)
data_within <- data %>% filter((x_vals-mean(x_vals))^2 +
(y_vals-mean(y_vals))^2 < 1.6^2)
#Assigna labels och merga
data_outside$label <- 1
data_within$label <- 0
all_data <- rbind(data_outside, data_within)
#Gör om till factors för att få schyssta labels
all_data$label <- factor(all_data$label)
sc <- ggplot(all_data, aes(x_vals, y_vals)) + geom_point(aes(color = label))
sc
#Vi gör en spännande support vector machine fit på det!
#Vi kan kalla på svm-paketet
svmfit = svm(label ~ x_vals + y_vals, data = all_data,
kernel = "radial", cost = 1000, scale = FALSE)
plot(svmfit, all_data)
print(svmfit)
#Ändrar data med polära koordinater. Exakt vad SVM gör när kernel=radian
all_data <- all_data %>% mutate(radius = sqrt((x_vals-mean(x_vals))^2
+ (y_vals-mean(y_vals))^2),
angle = atan2((y_vals - mean(all_data$y_vals)),
(x_vals- mean(all_data$x_vals))))
print(all_data)
sc <- ggplot(all_data, aes(radius, angle)) + geom_point(aes(color = label))
sc
svmfit = svm(label ~ angle + radius, data = all_data,
kernel = "linear", cost = 1000, scale = FALSE)
print(svmfit)
all_data$x_vals <- NULL
all_data$y_vals <- NULL
plot(svmfit, all_data)
# Kan transformera tillbaka med kartesiska koordinater
all_data <- all_data %>% mutate(x = radius * cos(angle),
y = radius * sin(angle))
sc <- ggplot(all_data, aes(x, y)) +
geom_point(aes(color = label))
sc
